{"version":3,"sources":["common/configuration/ApplicationConfiguration.ts","dependencies.ts","common/components/loading/Loading.tsx","common/components/page-not-found/PageNotFound.tsx","common/router/Routes.tsx","App.tsx","common/internationalization/i18n.ts","serviceWorker.js","index.tsx","ioc.ts"],"names":["ApplicationConfiguration","injectable","_dec","_class","Object","classCallCheck","this","container","bind","toSelf","inSingletonScope","Loading","react","className","Spinner","animation","role","PageNotFound","PoundBar","lazy","Promise","all","__webpack_require__","e","then","Routes","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","fallback","Loading_Loading","react_router","path","component","exact","from","to","React","Component","App","react_router_dom","Routes_Routes","i18next","use","initReactI18next","init","resources","fr","lng","fallbackLng","ns","defaultNS","keySeparator","interpolation","escapeValue","Boolean","window","location","hostname","match","ReactDOM","render","dist","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","inversify__WEBPACK_IMPORTED_MODULE_1__","Container"],"mappings":"8iBAGaA,EADZC,sBACDC,CAAAC,EAAA,SAAAH,IAAAI,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,MAAAG,ECAAI,IAAUC,KAA+BR,GAA0BS,SAASC,4ICC/DC,EAAU,kBACrBC,EAAA,qBAAKC,UAAU,mBACbD,EAAA,cAACE,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/BJ,EAAA,sBAAMC,UAAU,WAAhB,iBCLOI,EAAe,kBAC1BL,EAAA,0CCEIM,EACJC,eAAK,kBACHC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAd,KAAA,aAISiB,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAArB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,GAAArB,OAAAuB,EAAA,EAAAvB,CAAAE,KAAAF,OAAAwB,EAAA,EAAAxB,CAAAqB,GAAAI,MAAAvB,KAAAwB,YAAA,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAAqB,EAAAC,GAAAtB,OAAA4B,EAAA,EAAA5B,CAAAqB,EAAA,EAAAQ,IAAA,SAAAC,MAAA,WAEI,OACEC,EAAAC,EAAAC,cAACzB,EAAA,SAAD,CAAU0B,SAAUH,EAAAC,EAAAC,cAACE,EAAD,OAClBJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWxB,IAClCiB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUG,OAAK,EAACC,KAAK,IAAIC,GAAG,aAC5BV,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOE,UAAWzB,UAP5BQ,EAAA,CAA4BqB,IAAMC,WCMnBC,EAZY,WACzB,OACEb,EAAAC,EAAAC,cAAA,OAAKxB,UAAU,OACbsB,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAAA,OAAKxB,UAAU,cACbsB,EAAAC,EAAAC,cAACa,EAAD,oCCNVC,IACGC,IAAIC,KACJC,KAAK,CACJC,UAAW,CACTC,MAEFC,IAAK,KACLC,YAAa,KACbC,GAAI,CAAC,gBACLC,UAAW,eACXC,cAAc,EACdC,cAAe,CACbC,aAAa,KAIJZ,EAAf,ECRoBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECPNC,IAASC,OACLnC,EAAAC,EAAAC,cAACkC,EAAA,SAAD,CAAUhE,UAAWA,KACjB4B,EAAAC,EAAAC,cAACmC,EAAD,OAELC,SAASC,eAAe,SDkHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC,gDEnInBzD,EAAA0D,EAAAC,EAAA,sBAAA1E,IAAAe,EAAA,SAAA4D,EAAA5D,EAAA,IAGaf,EAAY,IAAI4E","file":"static/js/main.3b2ae86f.chunk.js","sourcesContent":["import { injectable } from 'inversify';\r\n\r\n@injectable()\r\nexport class ApplicationConfiguration {\r\n}\r\n","import { container } from './ioc';\r\nimport { ApplicationConfiguration } from './common/configuration/ApplicationConfiguration';\r\n\r\ncontainer.bind<ApplicationConfiguration>(ApplicationConfiguration).toSelf().inSingletonScope();\r\n","import * as React from 'react';\r\nimport './Loading.scss';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nexport const Loading = () => (\r\n  <div className='loading-spinner'>\r\n    <Spinner animation='border' role='status'>\r\n      <span className='sr-only'>Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\n","import * as React from 'react';\r\n\r\nexport const PageNotFound = () => (\r\n  <p>Page not found</p>\r\n);\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Redirect, Switch, Route } from 'react-router-dom';\r\nimport { Loading } from '../components/loading/Loading';\r\nimport { PageNotFound } from '../components/page-not-found/PageNotFound';\r\n\r\nconst PoundBar = (\r\n  lazy(() => (\r\n    import('../../pound-calculator/components/PoundBar')\r\n  ))\r\n);\r\n\r\nexport class Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Suspense fallback={<Loading />}>\r\n        <Switch>\r\n          <Route path='/loadbar' component={PoundBar} />\r\n          <Redirect exact from='/' to='/loadbar' />\r\n          <Route component={PageNotFound} />\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './App.scss';\r\nimport { Routes } from './common/router/Routes';\r\n\r\nconst App: React.FC<any> = () => {\r\n  return (\r\n    <div className='App'>\r\n      <BrowserRouter>\r\n        <div className='main-frame'>\r\n          <Routes />\r\n        </div>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import i18next from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport fr from './fr.json';\r\n\r\ni18next\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources: {\r\n      fr\r\n    },\r\n    lng: 'fr',\r\n    fallbackLng: 'fr',\r\n    ns: ['translations'],\r\n    defaultNS: 'translations',\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    }\r\n  });\r\n\r\nexport default i18next;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './polyfill';\r\nimport { container } from './ioc';\r\nimport './dependencies';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport './common/internationalization/i18n';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'inversify-react';\r\n\r\nReactDOM.render((\r\n    <Provider container={container}>\r\n        <App />\r\n    </Provider>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import 'reflect-metadata';\r\nimport { Container } from 'inversify';\r\n\r\nexport const container = new Container();\r\n"],"sourceRoot":""}